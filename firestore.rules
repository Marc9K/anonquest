rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /surveys/{surveyId} {

      function isAuthed() {
        return request.auth != null;
      }

      function isParticipant() {
        return isAuthed()
          && exists(/databases/$(database)/documents/surveys/$(surveyId)/participants/$(request.auth.token.email));
      }

      function isOwner() {
        return isAuthed()
                && request.auth.token.email == get(/databases/$(database)/documents/surveys/$(surveyId)).data.ownerEmail;
      }

      function hasOwner() {
        return isAuthed() 
                && resource.data.ownerEmail == request.auth.token.email;
      }

      function statusIs(status) {
        return  get(/databases/$(database)/documents/surveys/$(surveyId)).data.status == status;
      }

      function hasStatus(status) {
        return resource.data.status == status
      }

      function statusWillBe(status) {
        return  'status' in request.resource.data && request.resource.data.status == status;
      }

      function isSentValidSurvey() {
        let fields = ["title", "description", "ownerEmail", "status"];
        return request.resource.data.keys().hasAll(fields)
        && request.resource.data.keys().hasOnly(fields)
      }

      // create: read: update: delete:

      allow create: if isAuthed() && isSentValidSurvey()
        && request.resource.data.ownerEmail == request.auth.token.email 
        && statusWillBe('pending');

      allow read: if hasOwner() 
        || (isParticipant() && hasStatus('active'));

      allow update: if hasOwner() 
        && ((hasStatus('pending') && (statusWillBe("pending") || statusWillBe('active')) ) || (hasStatus('active') && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) && request.resource.data.status == 'closed'));

      allow delete: if hasOwner();

      match /participants/{participantEmail} {
        allow create: if isOwner() && !statusIs('closed');

        allow read: if isOwner() && statusIs('pending') || request.auth.token.email == participantEmail;

        allow delete: if isOwner() || request.auth.token.email == participantEmail;

      }

      match /questions/{questionId} {
        allow read: if (isParticipant() && statusIs('active')) || isOwner();

        allow create, update, delete: if isOwner() && statusIs('pending');

        match /answers/{answerId} {
          allow create: if isOwner() && statusIs('pending') && request.resource.data.count == 0 || isParticipant() && statusIs('active') && request.resource.data.count == 1;
          allow delete: if isOwner() && statusIs('pending');
          allow read: if isOwner() && !statusIs('active');

          allow update: if isParticipant() && statusIs('active') && request.resource.data.count - 1 == resource.data.count;
        }
      }
    }
  }
}